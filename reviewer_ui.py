#!/usr/bin/env python3
import streamlit as st
import pandas as pd
from datetime import datetime
from pathlib import Path
from typing import Optional, Tuple, Dict, Callable
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from styles import (
    apply_custom_styles, 
    create_notification, 
    create_card, 
    create_data_stats,
    create_progress_indicator
)

try:
    from integrated_reviewer import IntegratedReviewSystem
except ImportError as ie:
    st.error("M√≥dulo 'integrated_reviewer' n√£o encontrado. Verifique se o arquivo existe e est√° no caminho correto.")
    raise ie

class ReviewerUI:
    """
    Classe principal para gerenciar a interface do usu√°rio do sistema de revis√£o.
    Implementa padr√£o Singleton para garantir √∫nica inst√¢ncia.
    """
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(ReviewerUI, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance

    def __init__(self):
        if self._initialized:
            return
        
        self._initialized = True
        self.initialize_session_state()
        self.config = {}
        self.system = IntegratedReviewSystem()  # Inicializa o sistema uma √∫nica vez
        apply_custom_styles()

    def initialize_session_state(self) -> None:
        """Inicializa o estado da sess√£o com valores padr√£o."""
        default_states = {
            'search_results': None,
            'review_text': None,
            'saved_files': [],
            'pdf_files': [],  # Nova lista persistente para arquivos PDF
            'error_message': None,
            'selected_rows': {},
            'search_history': [],
            'last_update': None,
            'theme_color': 'light',
            'language': 'pt-BR',
            'show_success_animation': False,
            'processing': False  # Novo estado para controlar processamento
        }
        
        for key, value in default_states.items():
            if key not in st.session_state:
                st.session_state[key] = value

    def execute_review(self) -> None:
        """Executa a gera√ß√£o da revis√£o de literatura com tratamento de erros aprimorado."""
        if st.session_state.processing:
            create_notification(
                "J√° existe um processamento em andamento.",
                type="warning"
            )
            return

        try:
            df_all = st.session_state.search_results.copy()
            selected_indices = [i for i, val in st.session_state.selected_rows.items() if val]
            
            if not selected_indices:
                create_notification(
                    "Selecione pelo menos um artigo para gerar a revis√£o.",
                    type="warning"
                )
                return

            df_filtered = df_all.iloc[selected_indices]
            total_articles = len(df_filtered)
            
            st.session_state.processing = True
            progress_placeholder = st.empty()
            
            def update_progress(current: int, total: int, message: str = "") -> None:
                if not st.session_state.processing:
                    return
                progress = int((current / total) * 100)
                with progress_placeholder.container():
                    create_progress_indicator(current, total, f"Processando artigos: {message}")
                    if progress < 100:
                        create_notification(
                            f"Processando artigo {current} de {total}: {message}",
                            type="info",
                            duration=30
                        )

            # Configura o callback no sistema
            self.system.set_progress_callback(update_progress)

            with st.spinner("üîÑ Gerando revis√£o de literatura..."):
                update_progress(0, total_articles, "Iniciando processamento")
                
                review_text, saved_files = self.system.review_papers(
                    df=df_filtered,
                    theme=self.config['theme'],
                    provider=self.config['provider'],
                    model=self.config['model'],
                    output_lang=self.config['output_lang'],
                    save_results=True,
                    output_dir=self.config['output_dir']
                )
                
                st.session_state.review_text = review_text
                st.session_state.saved_files = saved_files
                st.session_state.show_success_animation = True
                
                # Adiciona PDFs da pesquisa ao estado da sess√£o para garantir persist√™ncia
                if 'pdf_files' not in st.session_state:
                    st.session_state.pdf_files = []
                
                # Adiciona os arquivos salvos √† lista persistente
                for file in saved_files:
                    if file not in st.session_state.pdf_files:
                        st.session_state.pdf_files.append(file)
                
                update_progress(total_articles, total_articles, "Processamento conclu√≠do")
                st.balloons()
                
                # Rola para a aba de revis√£o
                js = """
                    <script>
                        setTimeout(() => {
                            const reviewTab = document.querySelector('button[role="tab"]:nth-child(3)');
                            if (reviewTab) {
                                reviewTab.click();
                                reviewTab.scrollIntoView({ behavior: 'smooth' });
                            }
                        }, 1000);
                    </script>
                """
                st.markdown(js, unsafe_allow_html=True)
                
        except Exception as e:
            create_notification(
                f"‚ùå Erro ao gerar revis√£o: {str(e)}",
                type="error",
                duration=600
            )
            progress_placeholder.empty()
        finally:
            st.session_state.processing = False

    def display_results(self) -> None:
        """Exibe os resultados da pesquisa em uma interface moderna e interativa."""
        if st.session_state.search_results is None:
            return

        if st.session_state.show_success_animation:
            st.balloons()
            create_notification("‚ú® Revis√£o conclu√≠da com sucesso!", type="success", duration=10)
            st.session_state.show_success_animation = False

        tabs = st.tabs(["üìä Resultados", "üìà An√°lises", "üìù Revis√£o", "üì• Downloads"])
        
        with tabs[0]:
            self.display_results_tab()
        
        with tabs[1]:
            self.display_analysis_tab()
        
        with tabs[2]:
            self.display_review_tab()
            
        with tabs[3]:
            self.display_downloads_tab()

    def create_header(self) -> None:
        """Cria o cabe√ßalho da aplica√ß√£o com anima√ß√£o e estilo moderno."""
        st.markdown("""
            <div style="text-align: center; padding: 0 0 2rem 0; animation: fadeIn 0.5s ease-out;">
                <h1 style="color: var(--primary-700); font-size: 2.5rem; margin-bottom: 1rem;">
                    üìö Revis√£o de Literatura Inteligente
                </h1>
                <p style="color: var(--primary-500); font-size: 1.2rem; font-weight: 500;">
                    Automatize sua pesquisa acad√™mica com IA
                </p>
            </div>
        """, unsafe_allow_html=True)

    def create_search_section(self) -> None:
        """Cria a se√ß√£o de pesquisa centralizada na p√°gina principal."""
        # Inicializa valores padr√£o se n√£o estiverem definidos
        if 'max_results' not in self.config:
            self.config['max_results'] = 10
            
        st.markdown("""
            <style>
            .search-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                margin: 2rem auto;
                width: 80%;
                max-width: 800px;
            }
            </style>
        """, unsafe_allow_html=True)
        
        with st.container():
            st.markdown('<div class="search-container">', unsafe_allow_html=True)
            
            # Campo de pesquisa
            self.config['theme'] = st.text_input(
                "Tema da Pesquisa",
                help="Digite o tema principal da sua pesquisa",
                placeholder="Ex: COVID-19 and Vaccines",
                label_visibility="collapsed"
            ).strip()
            
            # Bot√µes
            col1, col2 = st.columns([1, 1])
            with col1:
                if st.button("üîç Pesquisar", 
                            use_container_width=True,
                            help="Iniciar pesquisa de artigos",
                            disabled=st.session_state.processing):
                    if not self.config['theme']:
                        create_notification(
                            "Por favor, digite um tema para pesquisar.",
                            type="error",
                            duration=5000
                        )
                    else:
                        self.execute_search()
            
            with col2:
                if st.button("üîÑ Limpar",
                            use_container_width=True,
                            help="Limpar resultados",
                            disabled=st.session_state.processing):
                    self.clear_results()
                    create_notification(
                        "Resultados limpos com sucesso!",
                        type="success"
                    )
            
            st.markdown('</div>', unsafe_allow_html=True)

    def create_sidebar_config(self) -> Dict:
        """
        Cria a configura√ß√£o da barra lateral com interface moderna e valida√ß√µes.
        
        Returns:
            Dict: Configura√ß√µes validadas selecionadas pelo usu√°rio
        """
        with st.sidebar:
            st.markdown("""
                <h3 style="text-align: center; color: var(--primary-700); margin-bottom: 1rem;">
                    üîß Configura√ß√µes
                </h3>
            """, unsafe_allow_html=True)

            # Expander para crit√©rios de pesquisa (anteriormente "B√°sico" + "IA")
            with st.expander("üîç Crit√©rios de Pesquisa", expanded=True):
                self.config['max_results'] = st.slider(
                    "N√∫mero de Artigos",
                    2, 50, 10,
                    help="Defina a quantidade de artigos para busca"
                )
                
                # Elementos do antigo grupo "IA" agora aqui
                providers = {
                    "openrouter": "üîç OpenRouter",
                    "anthropic": "üåü Anthropic",
                    "gemini": "üîµ Gemini",
                    "openai": "ü§ñ OpenAI",
                    "deepseek": "üéØ DeepSeek"
                }
                
                self.config['provider'] = st.selectbox(
                    "Provedor de IA",
                    options=list(providers.keys()),
                    format_func=lambda x: providers[x]
                )

                provider_model_map = {
                    "openrouter": ["google/gemini-2.0-pro-exp-02-05:free","cognitivecomputations/dolphin3.0-r1-mistral-24b:free",
                                    "cognitivecomputations/dolphin3.0-mistral-24b:free","openai/o3-mini-high","openai/o3-mini",
                                    "openai/chatgpt-4o-latest","openai/gpt-4o-mini","google/gemini-2.0-flash-001",
                                    "google/gemini-2.0-flash-thinking-exp:free","google/gemini-2.0-flash-lite-preview-02-05:free",
                                    "google/gemini-2.0-pro-exp-02-05:free", "deepseek/deepseek-r1-distill-llama-70b:free",
                                    "deepseek/deepseek-r1-distill-qwen-32b","deepseek/deepseek-r1:free","qwen/qwen-plus",
                                    "qwen/qwen-max","qwen/qwen-turbo","mistralai/codestral-2501","mistralai/mistral-small-24b-instruct-2501:free",
                                    "anthropic/claude-3.5-haiku-20241022:beta","anthropic/claude-3.5-sonnet","perplexity/sonar-reasoning",
                                    "perplexity/sonar","perplexity/llama-3.1-sonar-large-128k-online"],
                    "anthropic": ["claude-3-5-haiku-20241022", "claude-3-5-sonnet-20241022"],
                    "gemini": ["gemini-2.0-flash-lite-preview-02-05","gemini-2.0-flash", "gemini-1.5-flash","gemini-1.5-pro"],
                    "openai": ["gpt-4o", "gpt-4o-mini", "o1-mini"],
                    "deepseek": ["deepseek-chat", "deepseek-reasoner"]
                }
                
                self.config['model'] = st.selectbox(
                    "Modelo de IA",
                    options=provider_model_map[self.config['provider']]
                )
                
                languages = {
                    "pt-BR": "üáßüá∑ Portugu√™s (Brasil)",
                    "en-US": "üá∫üá∏ Ingl√™s (EUA)",
                    "es-ES": "üá™üá∏ Espanhol (Espanha)",
                    "fr-FR": "üá´üá∑ Franc√™s (Fran√ßa)",
                    "it-IT": "üáÆüáπ Italiano (It√°lia)",
                    "ru-RU": "üá∑üá∫ Russo (R√∫ssia)",
                    "ar-AE": "üá¶üá™ √Årabe (Emirados)",
                    "zh-HK": "üá≠üá∞ Chin√™s (Hong Kong)"
                }
                
                self.config['output_lang'] = st.selectbox(
                    "Idioma da Revis√£o",
                    options=list(languages.keys()),
                    format_func=lambda x: languages[x]
                )

            # Expander para configura√ß√µes avan√ßadas
            with st.expander("‚öôÔ∏è Avan√ßado", expanded=False):
                # Filtros de data - usando subheaders em vez de expanders aninhados
                st.subheader("üìÖ Filtros de Data", anchor=False)
                self.config['use_date_range'] = st.checkbox("Filtrar por Data")
                self.config['date_range'] = None
                
                if self.config['use_date_range']:
                    col1, col2 = st.columns(2)
                    with col1:
                        start_date = st.date_input(
                            "Data Inicial",
                            value=datetime(2010, 1, 1).date(),
                            format="DD/MM/YYYY"
                        )
                    with col2:
                        end_date = st.date_input(
                            "Data Final",
                            format="DD/MM/YYYY"
                        )
                    if start_date and end_date:
                        if start_date > end_date:
                            st.error("Data inicial deve ser anterior √† data final")
                        else:
                            self.config['date_range'] = (start_date, end_date)

                # Op√ß√µes de ordena√ß√£o
                st.markdown("---")
                sort_options = {
                    "relevance": "Relev√¢ncia",
                    "lastUpdatedDate": "√öltima Atualiza√ß√£o",
                    "submittedDate": "Data de Submiss√£o"
                }
                
                self.config['sort_by'] = st.selectbox(
                    "Ordenar Por",
                    options=list(sort_options.keys()),
                    format_func=lambda x: sort_options[x]
                )
                
                self.config['sort_order'] = st.selectbox(
                    "Ordem",
                    options=["descending", "ascending"],
                    format_func=lambda x: "Decrescente" if x == "descending" else "Crescente"
                )

                # Op√ß√µes de download - usando subheader em vez de expander aninhado
                st.markdown("---")
                st.subheader("üì• Download", anchor=False)
                self.config['download_all'] = st.checkbox("Baixar PDFs")
                self.config['output_dir'] = st.text_input(
                    "Diret√≥rio de Sa√≠da",
                    value="reviews",
                    help="Pasta onde os arquivos ser√£o salvos"
                ).strip()
                
                if self.config['download_all']:
                    self.config['download_count'] = st.slider("Quantidade",
                        1, self.config['max_results'], 2,
                        help="Quantidade de PDFs para download"
                    )
                else:
                    self.config['download_count'] = 0

            return self.config

    def execute_search(self) -> None:
        """Executa a busca de artigos com tratamento de erros aprimorado."""
        if st.session_state.processing:
            return

        try:
            st.session_state.processing = True
            with st.spinner("üîÑ Realizando pesquisa..."):
                results_df = self.system.search_papers(
                    query=self.config['theme'],
                    max_results=self.config['max_results'],
                    download_count=self.config.get('download_count', 0),
                    download_pdfs=self.config.get('download_all', False),
                    save_results=True,
                    output_dir=self.config.get('output_dir', 'reviews'),
                    date_range=self.config.get('date_range'),
                    sort_by=self.config.get('sort_by'),
                    sort_order=self.config.get('sort_order')
                )
                
                st.session_state.search_results = results_df
                st.session_state.review_text = None
                st.session_state.selected_rows = {}
                
                # Se houver downloads na busca, adicionar aos arquivos persistentes
                if self.config.get('download_all', False) and hasattr(self.system, 'get_downloaded_files'):
                    downloaded_files = self.system.get_downloaded_files()
                    if downloaded_files:
                        if 'pdf_files' not in st.session_state:
                            st.session_state.pdf_files = []
                        
                        for file in downloaded_files:
                            if file not in st.session_state.pdf_files:
                                st.session_state.pdf_files.append(file)
                
                create_notification(
                    f"üéâ Encontrados {len(results_df)} artigos relevantes!",
                    type="success"
                )
                
        except Exception as e:
            create_notification(
                f"‚ùå Erro na busca: {str(e)}",
                type="error",
                duration=5000
            )
        finally:
            st.session_state.processing = False

    def display_results_tab(self) -> None:
        """Exibe a aba de resultados com tabela interativa e op√ß√µes de sele√ß√£o."""
        st.markdown("""
            <h3 style="color: var(--primary-700); margin-bottom: 1rem;">
                üìö Artigos Encontrados
            </h3>
        """, unsafe_allow_html=True)

        df = st.session_state.search_results.copy()
        if 'selected' not in df.columns:
            df['selected'] = False

        # Configura√ß√£o das colunas
        column_config = {
            "selected": st.column_config.CheckboxColumn(
                "‚úì",
                help="Selecionar para revis√£o",
                default=False
            ),
            "title": st.column_config.TextColumn(
                "T√≠tulo",
                width="large"
            ),
            "pdf_url": st.column_config.LinkColumn(
                "PDF",
                width="medium",
                validate="url"
            ),
            "summary": st.column_config.TextColumn(
                "Resumo",
                width="large"
            )
        }

        # Reordena√ß√£o das colunas
        desired_columns = ["selected", "pdf_url", "title", "summary"]
        other_columns = [col for col in df.columns if col not in desired_columns]
        df = df[desired_columns + other_columns]

        # Editor de dados aprimorado
        edited_df = st.data_editor(
            df,
            column_config=column_config,
            hide_index=True,
            use_container_width=True,
            disabled=["title", "authors", "summary", "published", "pdf_url"],
            column_order=desired_columns + other_columns,
            key="results_editor"
        )

        # Atualiza√ß√£o das sele√ß√µes
        st.session_state.selected_rows = {
            i: bool(edited_df.loc[i, 'selected']) for i in edited_df.index
        }

        # Bot√£o de gera√ß√£o de revis√£o
        selected_count = sum(st.session_state.selected_rows.values())
        if selected_count > 0:
            st.markdown(f"""
                <div style="margin: 1rem 0;">
                    <p style="color: var(--primary-700);">
                        ‚ú® {selected_count} artigos selecionados para revis√£o
                    </p>
                </div>
            """, unsafe_allow_html=True)
            
            if st.button("üìù Gerar Revis√£o",
                        use_container_width=True,
                        help="Iniciar gera√ß√£o da revis√£o de literatura",
                        disabled=st.session_state.processing):
                self.execute_review()

    def display_analysis_tab(self) -> None:
        """Exibe a aba de an√°lises com visualiza√ß√µes interativas."""
        df = st.session_state.search_results

        if df is not None and not df.empty:
            # Estat√≠sticas gerais
            stats = {
                "Total de Artigos": len(df),
                "Per√≠odo": f"{df['published'].min()[:4]} - {df['published'].max()[:4]}",
                "Artigos Selecionados": sum(st.session_state.selected_rows.values())
            }
            create_data_stats(stats)

            # Timeline
            self.display_timeline(df)

            # Word Cloud
            if st.session_state.review_text:
                st.pyplot(self.create_wordcloud(st.session_state.review_text))
            else:
                create_card(
                    "Nuvem de Palavras",
                    "A nuvem de palavras ser√° gerada ap√≥s a cria√ß√£o da revis√£o.",
                    "‚è≥ Aguardando gera√ß√£o da revis√£o..."
                )

    def display_timeline(self, df: pd.DataFrame) -> None:
        """
        Cria um gr√°fico de linha do tempo interativo.
        
        Args:
            df (pd.DataFrame): DataFrame com os dados dos artigos
        """
        if "published" in df.columns:
            df = df.copy()
            df['published_date'] = pd.to_datetime(df['published'], errors='coerce')
            df_clean = df.dropna(subset=['published_date'])
            
            if not df_clean.empty:
                df_clean['year'] = df_clean['published_date'].dt.year
                year_counts = df_clean['year'].value_counts().sort_index()
                
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=year_counts.index,
                    y=year_counts.values,
                    mode='lines+markers',
                    name='Publica√ß√µes',
                    line=dict(color='var(--primary-500)', width=3),
                    marker=dict(
                        size=8,
                        color='var(--primary-700)',
                        symbol='circle'
                    )
                ))
                
                fig.update_layout(
                    title={
                        'text': 'Distribui√ß√£o de Publica√ß√µes por Ano',
                        'y':0.95,
                        'x':0.5,
                        'xanchor': 'center',
                        'yanchor': 'top'
                    },
                    xaxis_title='Ano de Publica√ß√£o',
                    yaxis_title='N√∫mero de Artigos',
                    template='plotly_white',
                    hovermode='x unified',
                    showlegend=False
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                create_notification(
                    "N√£o h√° dados suficientes para criar a linha do tempo.",
                    type="warning"
                )

    def create_wordcloud(self, text: str) -> plt.Figure:
        """
        Gera uma nuvem de palavras estilizada.
        
        Args:
            text (str): Texto para gerar a nuvem de palavras
            
        Returns:
            plt.Figure: Figura matplotlib com a nuvem de palavras
        """
        wordcloud = WordCloud(
            width=1200,
            height=600,
            background_color='white',
            colormap='viridis',
            max_words=200,
            contour_width=3,
            contour_color='steelblue'
        ).generate(text)
        
        fig, ax = plt.subplots(figsize=(15, 7))
        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis('off')
        plt.tight_layout(pad=0)
        return fig

    def display_review_tab(self) -> None:
        """Exibe a aba de revis√£o com o texto gerado e op√ß√µes de download."""
        if st.session_state.review_text:
            st.markdown(st.session_state.review_text)
            st.download_button(
                "üì• Baixar Revis√£o em TXT",
                st.session_state.review_text,
                file_name=f"revisao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain",
                help="Baixar a revis√£o em formato TXT",
                key="download_txt_button"
            )
        else:
            st.info("Nenhuma revis√£o gerada no momento.")
            
    def display_downloads_tab(self) -> None:
        """Exibe a aba de downloads com os PDFs baixados em formato elegante."""
        # Verificar se a op√ß√£o de download est√° ativada
        if not self.config.get('download_all', False):
            st.info("A op√ß√£o de download de PDFs n√£o est√° ativada. Ative-a nas configura√ß√µes avan√ßadas para baixar os artigos.")
            st.markdown("""
                <div style="text-align: center; margin: 2rem;">
                    <img src="https://cdn-icons-png.flaticon.com/512/2965/2965335.png" width="150" style="opacity: 0.5">
                    <p style="color: var(--text-color-secondary); margin-top: 1rem;">
                        Ative a op√ß√£o "Baixar PDFs" na se√ß√£o Avan√ßado das configura√ß√µes
                    </p>
                </div>
            """, unsafe_allow_html=True)
            return
            
        # Obter o diret√≥rio de sa√≠da configurado
        output_dir = self.config.get('output_dir', 'reviews')
        output_path = Path(output_dir)
        
        # Verificar se o diret√≥rio existe
        if not output_path.exists() or not output_path.is_dir():
            st.warning(f"O diret√≥rio '{output_dir}' n√£o existe ou n√£o √© um diret√≥rio v√°lido.")
            return
        
        # Procurar por arquivos PDF no diret√≥rio
        try:
            pdf_files = list(output_path.glob('**/*.pdf'))
            pdf_files.extend(list(output_path.glob('**/*.PDF')))
            # Incluir outros formatos de arquivo comuns em pesquisas acad√™micas
            pdf_files.extend(list(output_path.glob('**/*.bib')))
            pdf_files.extend(list(output_path.glob('**/*.Rmd')))
            pdf_files.extend(list(output_path.glob('**/*.md')))
            pdf_files.extend(list(output_path.glob('**/*.csv')))
            pdf_files.extend(list(output_path.glob('**/*.xlsx')))
            pdf_files.extend(list(output_path.glob('**/*.docx')))
            
            # Ordenar por data de modifica√ß√£o (mais recentes primeiro)
            pdf_files = sorted(pdf_files, key=lambda x: x.stat().st_mtime, reverse=True)
            
            # Atualizar a lista persistente
            st.session_state.pdf_files = [str(f) for f in pdf_files]
            
        except Exception as e:
            st.error(f"Erro ao buscar arquivos: {str(e)}")
            return
        
        if not pdf_files:
            st.info(f"Nenhum arquivo encontrado no diret√≥rio '{output_dir}'. Execute a revis√£o para baixar os PDFs.")
            return
            
        # Estat√≠sticas dos downloads
        st.markdown("""
            <h3 style="color: var(--primary-700); margin-bottom: 1rem;">
                üìä Estat√≠sticas de Downloads
            </h3>
        """, unsafe_allow_html=True)
        
        try:
            # M√©tricas b√°sicas dos arquivos
            total_files = len(pdf_files)
            total_size_bytes = sum(f.stat().st_size for f in pdf_files)
            total_size_mb = total_size_bytes / (1024 * 1024)
            
            # Encontrar a data do arquivo mais recente
            if pdf_files:
                latest_file = max(pdf_files, key=lambda x: x.stat().st_mtime)
                latest_date = datetime.fromtimestamp(latest_file.stat().st_mtime)
                latest_date_str = latest_date.strftime("%d/%m/%Y %H:%M")
            else:
                latest_date_str = "N/A"
            
            # Estat√≠sticas para exibi√ß√£o
            stats = {
                "Total de Arquivos": total_files,
                "Diret√≥rio": output_dir,
                "√öltima Atualiza√ß√£o": latest_date_str
            }
            
            create_data_stats(stats)
        except Exception as e:
            st.error(f"Erro ao calcular estat√≠sticas: {str(e)}")
            
        # Tabela de arquivos
        st.markdown("""
            <h3 style="color: var(--primary-700); margin-top: 2rem; margin-bottom: 1rem;">
                üìë Arquivos Dispon√≠veis
            </h3>
        """, unsafe_allow_html=True)
        
        # Criar dataframe com os arquivos
        files_data = []
        for i, file_obj in enumerate(pdf_files):
            try:
                file_name = file_obj.name
                file_size = file_obj.stat().st_size / (1024 * 1024)  # Tamanho em MB
                modified_time = datetime.fromtimestamp(file_obj.stat().st_mtime)
                modified_str = modified_time.strftime("%d/%m/%Y %H:%M")
                extension = file_obj.suffix.lower()
                
                # Determinar o √≠cone baseado na extens√£o
                icon = "üìÑ"
                if extension == '.pdf':
                    icon = "üìë"
                elif extension == '.bib':
                    icon = "üìö"
                elif extension in ['.rmd', '.md']:
                    icon = "üìù"
                elif extension in ['.csv', '.xlsx']:
                    icon = "üìä"
                elif extension == '.docx':
                    icon = "üìÑ"
                
                files_data.append({
                    "N¬∫": i+1,
                    "Tipo": icon,
                    "Nome": file_name,
                    "Tamanho (MB)": round(file_size, 2),
                    "Modificado": modified_str,
                    "Caminho": str(file_obj.absolute())
                })
            except Exception as e:
                st.error(f"Erro ao processar arquivo {file_obj}: {str(e)}")
                continue
            
        if files_data:
            files_df = pd.DataFrame(files_data)
            
            # Formatar a tabela com estilo elegante
            st.dataframe(
                files_df,
                column_config={
                    "Tipo": st.column_config.TextColumn("Tipo", width="small"),
                    "Nome": st.column_config.TextColumn("Nome do Arquivo", width="large"),
                    "Tamanho (MB)": st.column_config.NumberColumn(
                        "Tamanho (MB)",
                        format="%.2f MB",
                        width="medium"
                    ),
                    "Modificado": st.column_config.TextColumn("Data de Modifica√ß√£o", width="medium"),
                    "Caminho": st.column_config.LinkColumn("Abrir Arquivo", width="small", display_text="Abrir"),
                },
                use_container_width=True,
                hide_index=True
            )
            
            # Op√ß√£o para abrir o diret√≥rio
            st.markdown(f"""
                <div style="margin-top: 2rem;">
                    <p style="color: var(--text-color-secondary); text-align: center;">
                        Todos os arquivos est√£o no diret√≥rio: <code>{output_dir}</code>
                    </p>
                </div>
            """, unsafe_allow_html=True)
            
            # Adicionar bot√£o para limpar diret√≥rio
            if st.button("üóëÔ∏è Limpar Diret√≥rio", help="Remove todos os arquivos do diret√≥rio de sa√≠da"):
                try:
                    # Confirma√ß√£o de limpeza
                    if st.session_state.get('confirm_clean', False):
                        for file in pdf_files:
                            try:
                                file.unlink()
                            except:
                                pass
                        
                        # Limpar o estado da sess√£o relacionado aos arquivos
                        st.session_state.pdf_files = []
                        st.session_state.saved_files = []
                        st.session_state.confirm_clean = False
                        
                        st.success(f"Diret√≥rio '{output_dir}' limpo com sucesso!")
                        st.rerun()
                    else:
                        st.session_state.confirm_clean = True
                        st.warning(f"Tem certeza que deseja excluir todos os {total_files} arquivos? Clique novamente para confirmar.")
                except Exception as e:
                    st.error(f"Erro ao limpar diret√≥rio: {str(e)}")
            
            # M√©tricas de visualiza√ß√£o
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total de Arquivos", f"{total_files}")
            with col2:
                st.metric("Espa√ßo Utilizado", f"{total_size_mb:.2f} MB")
            with col3:
                files_per_article = total_files / max(1, len(st.session_state.search_results)) if st.session_state.search_results is not None else 0
                st.metric("Arquivos por Artigo", f"{files_per_article:.1f}")
        else:
            st.info("Nenhum arquivo dispon√≠vel para exibi√ß√£o.")

    def clear_results(self) -> None:
        """Limpa os resultados da pesquisa, mas mant√©m os arquivos baixados."""
        st.session_state.search_results = None
        st.session_state.review_text = None
        st.session_state.selected_rows = {}
        st.session_state.saved_files = []
        st.session_state.error_message = None
        st.session_state.processing = False
        st.session_state.show_success_animation = False
        # N√£o limpa os PDF_files para manter o hist√≥rico de downloads

def main():
    """Fun√ß√£o principal que inicializa e executa a interface do usu√°rio."""
    try:
        # Inicializa√ß√£o da UI
        ui = ReviewerUI()
        ui.create_header()
        
        # Configura√ß√£o via sidebar (primeiro para garantir que os valores estar√£o dispon√≠veis)
        ui.create_sidebar_config()
        
        # Nova se√ß√£o de pesquisa centralizada
        ui.create_search_section()
        
        # √Årea principal de resultados
        if st.session_state.search_results is not None:
            ui.display_results()
            
        # Tratamento de erros globais
        if st.session_state.error_message:
            create_notification(
                st.session_state.error_message,
                type="error"
            )
            st.session_state.error_message = None
            
    except Exception as e:
        create_notification(
            f"‚ùå Erro inesperado: {str(e)}",
            type="error"
        )
        st.error("Ocorreu um erro inesperado. Por favor, tente novamente ou contate o suporte.")

if __name__ == "__main__":
    main()
