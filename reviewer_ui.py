#!/usr/bin/env python3
import streamlit as st
import pandas as pd
from datetime import datetime
from pathlib import Path
from typing import Optional, Tuple
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import plotly.express as px
import os
from styles import apply_custom_styles

try:
    from integrated_reviewer import IntegratedReviewSystem
except ImportError as ie:
    st.error("M√≥dulo 'integrated_reviewer' n√£o encontrado. Verifique se o arquivo existe e est√° no caminho correto.")
    raise ie

def display_timeline(df: pd.DataFrame):
    """Exibe histograma de publica√ß√µes por ano com estilo melhorado."""
    if "published" in df.columns:
        df = df.copy()
        df['published_date'] = pd.to_datetime(df['published'], errors='coerce')
        df_clean = df.dropna(subset=['published_date'])
        if not df_clean.empty:
            df_clean['year'] = df_clean['published_date'].dt.year
            fig = px.histogram(
                df_clean,
                x='year',
                nbins=10,
                title="Distribui√ß√£o de Publica√ß√µes por Ano",
                labels={'year': 'Ano de Publica√ß√£o', 'count': 'N√∫mero de Artigos'},
                color_discrete_sequence=['#0096c7'],
                template='plotly_white'
            )
            fig.update_layout(
                plot_bgcolor='white',
                paper_bgcolor='white',
                title_font=dict(size=20, color='#023e8a'),
                showlegend=False,
                margin=dict(t=50, l=0, r=0, b=0),
                xaxis=dict(gridcolor='#f0f0f0'),
                yaxis=dict(gridcolor='#f0f0f0')
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("üìä N√£o h√° dados suficientes para criar a linha do tempo.")
    else:
        st.warning("‚ö†Ô∏è Coluna 'published' n√£o encontrada no conjunto de dados.")

def create_wordcloud(text: str):
    """Gera uma nuvem de palavras com estilo melhorado."""
    wordcloud = WordCloud(
        width=1200,
        height=600,
        background_color='white',
        colormap='viridis',
        max_words=200,
        contour_width=3,
        contour_color='steelblue'
    ).generate(text)
    
    fig, ax = plt.subplots(figsize=(15, 7))
    ax.imshow(wordcloud, interpolation='bilinear')
    ax.axis('off')
    plt.tight_layout(pad=0)
    return fig

def initialize_session_state():
    """Inicializa o estado da sess√£o com valores padr√£o."""
    default_states = {
        'search_results': None,
        'review_text': None,
        'saved_files': [],
        'error_message': None,
        'selected_rows': {},
        'search_history': [],
        'last_update': None
    }
    for key, value in default_states.items():
        if key not in st.session_state:
            st.session_state[key] = value

def execute_search(theme: str, max_results: int, provider: str, model: str,
                  output_lang: str, download_all: bool, output_dir: str,
                  date_range: Optional[Tuple[datetime, datetime]], sort_by: str,
                  sort_order: str, download_count: int):
    """Executa a busca de artigos."""
    try:
        system = IntegratedReviewSystem()
        results_df = system.search_papers(
            query=theme,
            max_results=max_results,
            download_count=download_count,
            download_pdfs=download_all,
            save_results=True,
            output_dir=output_dir,
            date_range=date_range,
            sort_by=sort_by,
            sort_order=sort_order
        )
        st.session_state.search_results = results_df
        st.session_state.review_text = None
        st.session_state.saved_files = []
        st.success(f"üéâ Foram encontrados {len(results_df)} artigos!")
        
    except Exception as e:
        st.session_state.error_message = str(e)

def execute_review(theme: str, provider: str, model: str,
                  output_lang: str, output_dir: str):
    """Executa a revis√£o de literatura."""
    try:
        system = IntegratedReviewSystem()
        df_all = st.session_state.search_results.copy()
        selected_indices = [i for i, val in st.session_state.selected_rows.items() if val]
        
        if not selected_indices:
            st.warning("‚ö†Ô∏è Selecione pelo menos um artigo para gerar a revis√£o.")
            return

        df_filtered = df_all.iloc[selected_indices]
        
        with st.spinner("üîÑ Gerando revis√£o de literatura..."):
            review_text, saved_files = system.review_papers(
                df=df_filtered,
                theme=theme,
                provider=provider,
                model=model,
                output_lang=output_lang,
                save_results=True,
                output_dir=output_dir
            )
            
        st.session_state.review_text = review_text
        st.session_state.saved_files = saved_files
        st.success(f"‚ú® Revis√£o gerada com sucesso! Analisados {len(selected_indices)} artigos.")
        
    except Exception as e:
        st.session_state.error_message = str(e)

def main():
    apply_custom_styles()
    initialize_session_state()
    
    st.markdown("""
        <div style="text-align: center;">
            <h1>üìö Sistema Avan√ßado de Revis√£o de Literatura</h1>
            <p class="subtitle">
                Automatize sua pesquisa acad√™mica com Intelig√™ncia Artificial
            </p>
        </div>
    """, unsafe_allow_html=True)

    # Sidebar
    with st.sidebar:
        st.markdown("<h3 style='text-align: center;'>üîß Configura√ß√µes</h3>", unsafe_allow_html=True)

        tab1, tab2, tab3 = st.tabs(["üìù B√°sico", "ü§ñ IA", "‚öôÔ∏è Avan√ßado"])
        
        with tab1:
            theme = st.text_input(
                "Tema da Pesquisa",
                help="Digite o tema principal da sua pesquisa"
            )
            
            max_results = st.slider(
                "N√∫mero de Artigos",
                2, 50, 10,
                help="Defina a quantidade de artigos para busca"
            )

        with tab2:
            provider = st.selectbox(
                "Provedor de IA",
                options=["anthropic", "openai", "gemini", "deepseek"],
                format_func=lambda x: {
                    "anthropic": "üåü Anthropic",
                    "openai": "ü§ñ OpenAI",
                    "gemini": "üîµ Gemini",
                    "deepseek": "üéØ DeepSeek"
                }[x]
            )

            provider_model_map = {
                "anthropic": ["claude-3-5-haiku-20241022", "claude-3-5-sonnet-20241022"],
                "openai": ["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"],
                "gemini": ["gemini-pro", "gemini-pro-vision"],
                "deepseek": ["deepseek-chat", "deepseek-coder"]
            }
            
            model = st.selectbox(
                "Modelo de IA",
                options=provider_model_map[provider]
            )
            
            output_lang = st.selectbox(
                "Idioma da Revis√£o",
                options=["pt-BR", "en-US", "es-ES"],
                format_func=lambda x: {
                    "pt-BR": "üáßüá∑ Portugu√™s (Brasil)",
                    "en-US": "üá∫üá∏ Ingl√™s (EUA)",
                    "es-ES": "üá™üá∏ Espanhol (Espanha)"
                }[x]
            )

        with tab3:
            with st.expander("üìÖ Filtros de Data", expanded=False):
                use_date_range = st.checkbox("Filtrar por Data")
                date_range = None
                if use_date_range:
                    col1, col2 = st.columns(2)
                    with col1:
                        start_date = st.date_input("Data Inicial")
                    with col2:
                        end_date = st.date_input("Data Final")
                    if start_date and end_date:
                        date_range = (start_date, end_date)

            sort_by = st.selectbox(
                "Ordenar Por",
                options=["relevance", "lastUpdatedDate", "submittedDate"],
                format_func=lambda x: {
                    "relevance": "Relev√¢ncia",
                    "lastUpdatedDate": "√öltima Atualiza√ß√£o",
                    "submittedDate": "Data de Submiss√£o"
                }[x]
            )
            
            sort_order = st.selectbox(
                "Ordem",
                options=["descending", "ascending"],
                format_func=lambda x: "Decrescente" if x == "descending" else "Crescente"
            )

            with st.expander("üì• Download", expanded=False):
                download_all = st.checkbox("Baixar PDFs")
                output_dir = st.text_input(
                    "Diret√≥rio de Sa√≠da",
                    value="reviews",
                    help="Pasta onde os arquivos ser√£o salvos"
                )
                if download_all:
                    download_count = st.slider(
                        "Quantidade",
                        1, max_results, 2
                    )
                else:
                    download_count = 0

# Bot√µes de a√ß√£o
        col1, col2 = st.columns([2, 2])
        with col1:
            search_button = st.button(
                "üîç Pesquisar Artigos",
                help="Realizar Pesquisa",
                key="search_button"
            )
        with col2:
            clear_button = st.button(
                "üîÑ Limpar Tabela",
                help="Limpar dados",
                key="clear_button"
            )

    # √Årea Principal
    if search_button and theme:
        with st.spinner("üîÑ Realizando pesquisa..."):
            execute_search(
                theme=theme,
                max_results=max_results,
                provider=provider,
                model=model,
                output_lang=output_lang,
                download_all=download_all,
                output_dir=output_dir,
                date_range=date_range if 'date_range' in locals() else None,
                sort_by=sort_by,
                sort_order=sort_order,
                download_count=download_count if 'download_count' in locals() else 0
            )

    if clear_button:
        st.session_state.search_results = None
        st.session_state.review_text = None
        st.session_state.selected_rows = {}
        # st.experimental_rerun()

    # Exibi√ß√£o dos Resultados
    if st.session_state.search_results is not None:
        tabs = st.tabs(["üìä Resultados", "üìà An√°lises", "üìù Revis√£o"])
        
        with tabs[0]:
            st.markdown("### üìö Artigos Encontrados")
            
            df = st.session_state.search_results.copy()
            if 'selected' not in df.columns:
                df['selected'] = False

            desired_columns = ["selected", "title", "pdf_url", "summary"]
            other_columns = [col for col in df.columns if col not in desired_columns]
            ordered_columns = desired_columns + other_columns
            df = df[ordered_columns]
            
            edited_df = st.data_editor(
                df,
                column_config={
                    "selected": st.column_config.CheckboxColumn(
                        "‚úì",
                        help="Selecionar para revis√£o"
                    ),
                    "title": st.column_config.TextColumn(
                        "T√≠tulo",
                        width="large"
                    ),
                    "pdf_url": st.column_config.LinkColumn(
                        "PDF",
                        width="small"
                    ),
                    "summary": st.column_config.TextColumn(
                        "Resumo",
                        width="medium"
                    ),
                },
                hide_index=True,
                use_container_width=True,
                disabled=["title", "authors", "summary", "published", "pdf_url"]
            )

            st.session_state.selected_rows = {
                i: bool(edited_df.loc[i, 'selected']) for i in edited_df.index
            }

            if any(st.session_state.selected_rows.values()):
                review_button = st.button(
                    "üìù Gerar Revis√£o",
                    help="Iniciar Revis√£o de Literatura",
                    key="review_button"
                )
                if review_button:
                    execute_review(
                        theme=theme,
                        provider=provider,
                        model=model,
                        output_lang=output_lang,
                        output_dir=output_dir
                    )

        with tabs[1]:
            col1, col2 = st.columns(2)
            with col1:
                display_timeline(df)
            with col2:
                if st.session_state.review_text:
                    st.pyplot(create_wordcloud(st.session_state.review_text))
                else:
                    st.info("‚è≥ A nuvem de palavras ser√° gerada ap√≥s a cria√ß√£o da revis√£o.")

        with tabs[2]:
            if st.session_state.review_text:
                st.markdown(st.session_state.review_text)
                
                st.download_button(
                    "üìÑ Salvar",
                    st.session_state.review_text,
                    file_name=f"revisao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain",
                    help="Salvar revis√£o em arquivo de texto"
                )
            else:
                st.info("üëÜ Selecione os artigos e clique em 'Gerar Revis√£o' para criar sua revis√£o de literatura.")

if __name__ == "__main__":
    main()


# #!/usr/bin/env python3
# import streamlit as st
# import pandas as pd
# from datetime import datetime
# from pathlib import Path
# from typing import Optional, Tuple
# from wordcloud import WordCloud
# import matplotlib.pyplot as plt
# import plotly.express as px
# import os

# # Importa o sistema integrado de revis√£o (refatorado)
# try:
#     from integrated_reviewer import IntegratedReviewSystem
# except ImportError as ie:
#     st.error("M√≥dulo 'integrated_reviewer' n√£o encontrado. Verifique se o arquivo existe e est√° no caminho correto.")
#     raise ie

# # Estilo e Configura√ß√µes Iniciais
# st.set_page_config(
#     page_title="Revis√£o de Literatura",
#     page_icon="üìö",
#     layout="wide",
#     initial_sidebar_state="expanded"
# )
# st.markdown("""
#     <style>
#     .main { padding: 0rem 1rem; }
#     .stButton>button {
#         width: 100%;
#         color: white;
#         background-color: #0096c7;
#         border: none;
#         padding: 10px 24px;
#         border-radius: 6px;
#         font-weight: 500;
#         transition: all 0.3s ease;
#     }
#     .stButton>button:hover {
#         background-color: #0077b6;
#         transform: translateY(-2px);
#         box-shadow: 0 2px 6px rgba(0,0,0,0.1);
#     }
#     .sidebar .sidebar-content { background-color: #f8f9fa; }
#     .block-container { padding-top: 2rem; }
#     h1 { color: #023e8a; font-weight: 600; }
#     h2 { color: #0077b6; font-weight: 500; }
#     h3 { color: #0096c7; font-weight: 500; }
#     .highlight { background-color: #e9ecef; padding: 1.2rem; border-radius: 8px; border-left: 4px solid #0096c7; }
#     .stSelectbox, .stTextArea { border-radius: 6px; }
#     .selected-label { color: green; font-weight: bold; }
#     </style>
#     """, unsafe_allow_html=True)

# # --------------------- Fun√ß√µes de Visualiza√ß√£o --------------------- #
# def display_timeline(df: pd.DataFrame):
#     """Exibe histograma de publica√ß√µes por ano."""
#     if "published" in df.columns:
#         df = df.copy()
#         df['published_date'] = pd.to_datetime(df['published'], errors='coerce')
#         df_clean = df.dropna(subset=['published_date'])
#         if not df_clean.empty:
#             df_clean['year'] = df_clean['published_date'].dt.year
#             fig = px.histogram(
#                 df_clean, 
#                 x='year', 
#                 nbins=10, 
#                 title="Distribui√ß√£o de Publica√ß√µes por Ano",
#                 labels={'year': 'Ano de Publica√ß√£o', 'count': 'N√∫mero de Artigos'}
#             )
#             st.plotly_chart(fig, use_container_width=True)
#         else:
#             st.write("N√£o h√° dados suficientes para criar a linha do tempo.")
#     else:
#         st.write("Coluna 'published' n√£o encontrada.")

# def create_wordcloud(text: str):
#     """Gera e retorna um objeto Figure com a nuvem de palavras."""
#     wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
#     fig, ax = plt.subplots(figsize=(10, 5))
#     ax.imshow(wordcloud, interpolation='bilinear')
#     ax.axis('off')
#     return fig

# # --------------------- Fun√ß√µes de Estado e Execu√ß√£o --------------------- #
# def initialize_session_state():
#     default_states = {
#         'search_results': None,    # DataFrame com resultados da busca
#         'review_text': None,       # Texto da revis√£o final
#         'saved_files': [],         # Lista de arquivos salvos
#         'error_message': None,     
#         'selected_rows': {}        # Dicion√°rio {row_index: True/False}
#     }
#     for key, value in default_states.items():
#         if key not in st.session_state:
#             st.session_state[key] = value

# def execute_search(
#     theme,
#     max_results,
#     provider,
#     model,
#     output_lang,
#     download_all,
#     output_dir,
#     date_range,
#     sort_by,
#     sort_order,
#     download_count
# ):
#     """
#     Apenas realiza a busca de artigos no arXiv. 
#     Armazena o DataFrame em `st.session_state.search_results`.
#     """
#     try:
#         system = IntegratedReviewSystem()
#         results_df = system.search_papers(
#             query=theme,                # <--- Usamos o "theme" como query
#             max_results=max_results,
#             download_count=download_count,
#             download_pdfs=download_all,
#             save_results=True,
#             output_dir=output_dir,
#             date_range=date_range,
#             sort_by=sort_by,
#             sort_order=sort_order
#         )
#         st.session_state.search_results = results_df
#         st.session_state.review_text = None  # Zera texto de revis√£o anterior, se houver
#         st.session_state.saved_files = []
#         st.success(f"Foram encontrados {len(results_df)} artigos!")
#     except Exception as e:
#         st.session_state.error_message = str(e)

# def execute_review(
#     theme,
#     provider,
#     model,
#     output_lang,
#     output_dir
# ):
#     """
#     Executa a revis√£o de literatura apenas para os artigos selecionados.
#     Armazena o texto em `st.session_state.review_text` e arquivos em `st.session_state.saved_files`.
#     """
#     try:
#         system = IntegratedReviewSystem()

#         # Filtra o DataFrame original com base nos itens selecionados
#         df_all = st.session_state.search_results.copy()
#         # √çndices selecionados
#         selected_indices = [i for i, val in st.session_state.selected_rows.items() if val]
#         if not selected_indices:
#             st.warning("Nenhum artigo selecionado.")
#             return

#         df_filtered = df_all.iloc[selected_indices]

#         review_text, saved_files = system.review_papers(
#             df=df_filtered,
#             theme=theme,
#             provider=provider,
#             model=model,
#             output_lang=output_lang,
#             save_results=True,
#             output_dir=output_dir
#         )
#         st.session_state.review_text = review_text
#         st.session_state.saved_files = saved_files
#         st.success(f"Revis√£o de literatura gerada com sucesso com {len(selected_indices)}!")
#     except Exception as e:
#         st.session_state.error_message = str(e)

# def main():
#     initialize_session_state()
#     st.title("üìö Revis√£o de Literatura")
#     st.markdown("""
#     Um sistema avan√ßado para pesquisar artigos acad√™micos no arXiv e gerar 
#     revis√µes de literatura abrangentes usando IA. Otimize seu processo de pesquisa
#     com recursos poderosos de busca, an√°lise e s√≠ntese.
#     """)

#     # Placeholder para a tabela - possibilita limpar os resultados em nova pesquisa
#     table_placeholder = st.empty()

#     # --------------------- SIDEBAR --------------------- #
#     with st.sidebar:
#         st.header("Configura√ß√µes")

#         # Grupo "Pesquisa B√°sica" - agora apenas 1 campo (Tema da Revis√£o)
#         with st.expander("Pesquisa B√°sica", expanded=True):
#             theme = st.text_input(
#                 "Tema da Revis√£o",
#                 placeholder="Digite o tema que deseja pesquisar...",
#                 help="Este tema ser√° usado para buscar artigos no arXiv e gerar a revis√£o."
#             )

#         with st.expander("Configura√ß√µes de IA", expanded=True):
#             provider = st.selectbox(
#                 "Provedor de IA",
#                 options=["anthropic", "openai", "gemini", "deepseek"],
#                 format_func=lambda x: {
#                     "anthropic": "Anthropic",
#                     "openai": "OpenAI",
#                     "gemini": "Gemini",
#                     "deepseek": "DeepSeek"
#                 }[x]
#             )
#             # Modelos default para cada provider (pode customizar se desejar)
#             provider_model_map = {
#                 "anthropic": ["claude-3-5-haiku-20241022", "claude-3-5-sonnet-20241022"],
#                 "openai": ["gpt-4o", "gpt-4o-mini", "o1", "o1-mini", "o3-mini"],
#                 "gemini": ["gemini-2.0-flash", "gemini-2.0-flash-lite-preview-02-05", "gemini-1.5-flash", "gemini-1.5-pro"],
#                 "deepseek": ["deepseek-chat", "deepseek-reasoner"]
#             }
#             model = st.selectbox(
#                 "Modelo",
#                 options=provider_model_map[provider],
#                 index=0
#             )
#             output_lang = st.selectbox(
#                 "Idioma de Sa√≠da",
#                 options=["pt-BR", "en-US", "es-ES"],
#                 format_func=lambda x: {
#                     "pt-BR": "Portugu√™s (Brasil)",
#                     "en-US": "Ingl√™s (EUA)",
#                     "es-ES": "Espanhol (Espanha)"
#                 }[x]
#             )

#         with st.expander("Configura√ß√µes Avan√ßadas"):
#             max_results = st.slider(
#                 "N√∫mero de Artigos",
#                 2, 50, 5,
#                 help="N√∫mero m√°ximo de artigos a incluir na busca inicial."
#             )
#             use_date_range = st.checkbox("Filtrar por Data")
#             date_range = None
#             if use_date_range:
#                 col1, col2 = st.columns(2)
#                 with col1:
#                     start_date = st.date_input("Data Inicial", value=None)
#                 with col2:
#                     end_date = st.date_input("Data Final", value=None)
#                 if start_date and end_date:
#                     date_range = (start_date, end_date)

#             sort_by = st.selectbox(
#                 "Ordenar Por",
#                 options=["relevance", "lastUpdatedDate", "submittedDate"],
#                 format_func=lambda x: {
#                     "relevance": "Relev√¢ncia",
#                     "lastUpdatedDate": "√öltima Atualiza√ß√£o",
#                     "submittedDate": "Data de Submiss√£o"
#                 }[x]
#             )
#             sort_order = st.selectbox(
#                 "Ordem",
#                 options=["descending", "ascending"],
#                 format_func=lambda x: "Decrescente" if x == "descending" else "Crescente"
#             )

#         with st.expander("Configura√ß√µes de Download"):
#             download_all = st.checkbox(
#                 "Baixar PDFs dos artigos",
#                 help="Baixar PDFs dos artigos encontrados"
#             )
#             output_dir = st.text_input(
#                 "Diret√≥rio de Sa√≠da",
#                 "reviews",
#                 help="Diret√≥rio para salvar os arquivos gerados"
#             )
#             download_count = st.slider(
#                 "N√∫mero de Artigos para Download",
#                 min_value=1,
#                 max_value=max_results,
#                 value=2,
#                 help="Define quantos PDFs ser√£o baixados."
#             )

#         # Bot√£o de pesquisa (APENAS busca, sem revis√£o ainda)
#         search_button = st.button("üîç Pesquisar", type="primary")

#     # --------------------- EXECU√á√ÉO DA PESQUISA --------------------- #
#     if search_button:
#         # Limpa a tabela de resultados anteriores a cada nova pesquisa
#         table_placeholder.empty()
#         if not theme.strip():
#             st.error("Por favor, insira o tema da revis√£o.")
#         else:
#             with st.spinner("üîÑ Pesquisando artigos no arXiv..."):
#                 execute_search(
#                     theme=theme,
#                     max_results=max_results,
#                     provider=provider,
#                     model=model,
#                     output_lang=output_lang,
#                     download_all=download_all,
#                     output_dir=output_dir,
#                     date_range=date_range,
#                     sort_by=sort_by,
#                     sort_order=sort_order,
#                     download_count=download_count
#                 )

#     # --------------------- EXIBI√á√ÉO DOS RESULTADOS --------------------- #
#     if st.session_state.search_results is not None:
#         if len(st.session_state.search_results) > 0:
#             st.header("üìä Resultados da Busca")
#             df = st.session_state.search_results.copy()
            
#             # Garante que a coluna de sele√ß√£o exista
#             if 'selected' not in df.columns:
#                 df['selected'] = False

#             # Reorganiza as colunas conforme a ordem desejada:
#             # "Marcar" (coluna 'selected'), "T√≠tulo" (coluna 'title'), 
#             # "link PDF" (coluna 'pdf_url'), "Sum√°rio" (coluna 'summary') e demais colunas.
#             desired_columns = ["selected", "title", "pdf_url", "summary"]
#             other_columns = [col for col in df.columns if col not in desired_columns]
#             ordered_columns = desired_columns + other_columns
#             df = df[ordered_columns]
            
#             # Exibimos a tabela usando o st.data_editor com a configura√ß√£o das colunas atualizada
#             edited_df = st.data_editor(
#                 df,
#                 column_config={
#                     "selected": st.column_config.CheckboxColumn("Marcar", help="Marque para incluir na revis√£o"),
#                     "title": st.column_config.TextColumn("T√≠tulo", width="large"),
#                     "pdf_url": st.column_config.LinkColumn("link PDF"),
#                     "summary": st.column_config.TextColumn("Sum√°rio", width="medium"),
#                     "authors": st.column_config.TextColumn("Autores", width="medium"),
#                     "published": "Data de Publica√ß√£o"
#                 },
#                 hide_index=True,
#                 use_container_width=True,
#                 num_rows="fixed",
#                 disabled=["title", "authors", "summary", "published", "pdf_url"]
#             )

#             # Atualiza em session_state quais linhas est√£o selecionadas
#             st.session_state.selected_rows = {
#                 i: bool(edited_df.loc[i, 'selected']) for i in edited_df.index
#             }

#             # Aba de visualiza√ß√µes
#             with st.expander("Visualiza√ß√µes dos Artigos"):
#                 col_viz1, col_viz2 = st.columns(2)
#                 with col_viz1:
#                     display_timeline(df)
#                 with col_viz2:
#                     st.markdown("#### (Espa√ßo para outra visualiza√ß√£o futura)")

#             # Bot√£o para iniciar revis√£o apenas dos selecionados
#             review_button = st.button("üìù Iniciar Revis√£o", type="primary")
#             if review_button:
#                 with st.spinner("üîÑ Gerando revis√£o de literatura..."):
#                     execute_review(
#                         theme=theme,
#                         provider=provider,
#                         model=model,
#                         output_lang=output_lang,
#                         output_dir=output_dir
#                     )

#         else:
#             st.info("Nenhum artigo encontrado na busca.")

#     # --------------------- EXIBI√á√ÉO DA REVIS√ÉO --------------------- #
#     if st.session_state.review_text:
#         st.header("üìù Revis√£o Gerada")
#         review_tabs = st.tabs(["Texto da Revis√£o", "Nuvem de Palavras"])
#         with review_tabs[0]:
#             st.markdown(st.session_state.review_text)
#         with review_tabs[1]:
#             wordcloud_fig = create_wordcloud(st.session_state.review_text)
#             st.pyplot(wordcloud_fig)

#     # Exibe poss√≠veis erros
#     if st.session_state.error_message:
#         st.error(f"Erro: {st.session_state.error_message}")
#         st.session_state.error_message = None


# if __name__ == "__main__":
#     main()
